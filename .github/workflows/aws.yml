name: Deploy to Amazon ECR and ECS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: iwasbornalone-repository
  ECS_SERVICE: iwasbornalone-service
  ECS_CLUSTER: projectsprint

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS service with new image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Get the current task definition
          TASK_DEFINITION=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].taskDefinition' --output text)

          # Get the current task definition JSON
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION)

          # Extract container name
          CONTAINER_NAME=$(echo $TASK_DEFINITION_JSON | jq -r '.taskDefinition.containerDefinitions[0].name')

          # Construct the new image URI
          NEW_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Create a new task definition JSON with the updated image
          NEW_TASK_DEFINITION_JSON=$(echo $TASK_DEFINITION_JSON | jq --arg IMAGE "$NEW_IMAGE" --arg NAME "$CONTAINER_NAME" '
            .taskDefinition | {
              family: .family,
              taskRoleArn: .taskRoleArn,
              executionRoleArn: .executionRoleArn,
              networkMode: .networkMode,
              containerDefinitions: (.containerDefinitions | map(if .name == $NAME then .image = $IMAGE else . end)),
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory,
              runtimePlatform: .runtimePlatform
            }')

          # Write the new task definition JSON to a file
          echo "$NEW_TASK_DEFINITION_JSON" > new_task_definition.json

          # Register the new task definition
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://new_task_definition.json | jq -r '.taskDefinition.taskDefinitionArn')

          # Update the ECS service to use the new task definition
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition $NEW_TASK_DEFINITION_ARN --force-new-deployment
